import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { DollarSign, TrendingUp, Clock } from 'lucide-react';

interface AutonomousRevenueDisplayProps {
  className?: string;
}

const AutonomousRevenueDisplay: React.FC<AutonomousRevenueDisplayProps> = ({ className }) => {
  const [balance, setBalance] = useState(0);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchBalance = async () => {
    try {
      const response = await fetch('https://tqbybefpnwxukzqkanip.supabase.co/rest/v1/application_balance?id=eq.1', {
        headers: {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxYnliZWZwbnd4dWt6cWthbmlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgzNjAyMDMsImV4cCI6MjA2MzkzNjIwM30.trGBxEF0wr4S_4gBteqV_TuWcIEMbzfDJiA1lga6Yko',
          'Accept': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data && data.length > 0) {
          setBalance(data[0].balance_amount || 0);
          setLastUpdate(new Date());
        }
      }
    } catch (error) {
      console.error('Error fetching autonomous revenue balance:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // Initial fetch
    fetchBalance();
    
    // Update every 30 seconds
    const interval = setInterval(fetchBalance, 30000);
    
    return () => clearInterval(interval);
  }, []);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };

  const formatTime = (date: Date | null) => {
    if (!date) return 'Never';
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  return (
    <Card className={`w-full ${className}`}>
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-lg">
          <DollarSign className="h-5 w-5 text-green-500" />
          Autonomous Revenue Pool
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-muted-foreground">Available Balance</p>
            <p className="text-2xl font-bold text-green-600">
              {isLoading ? '...' : formatCurrency(balance)}
            </p>
          </div>
          <Badge variant={balance >= 5 ? "default" : "secondary"} className="flex items-center gap-1">
            <TrendingUp className="h-3 w-3" />
            {balance >= 5 ? 'Ready' : 'Building'}
          </Badge>
        </div>
        
        <div className="flex items-center justify-between text-sm text-muted-foreground">
          <div className="flex items-center gap-1">
            <Clock className="h-3 w-3" />
            Last Updated
          </div>
          <span>{formatTime(lastUpdate)}</span>
        </div>
        
        <div className="pt-2 border-t border-border">
          <p className="text-xs text-muted-foreground">
            This balance is generated by autonomous monetization agents running in the background.
            {balance < 5 && ' Minimum $5.00 required for cashout.'}
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default AutonomousRevenueDisplay;